/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |				
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  11                                   	
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/

#include "inputMesh"

// x coordinates of various sections
x2 #calc "$forw + $diameter*$ogln";
x3 #calc "$x2 + $diameter*$brln";
x4 #calc "$x3 + $diameter*$btln";
x5 #calc "$x4 + $afln";

// meplat calculation
ymp #calc "($mepd)*($diameter)*cos($wedg)/2";
zmpp #calc "($mepd)*($diameter)*sin($wedg)/2";
zmpn #calc "($mepd)*($diameter)*sin(-$wedg)/2";

R #calc "($diameter)-($mepd)*($diameter)";

// ogive calculation
// 10 points divided in percentual
xogc1 #calc "$p1*($ogln)";
xogc2 #calc "$p2*($ogln)";
xogc3 #calc "$p3*($ogln)";
xogc4 #calc "$p4*($ogln)";
xogc5 #calc "$p5*($ogln)";
xogc6 #calc "$p6*($ogln)";
xogc7 #calc "$p7*($ogln)";
xogc8 #calc "$p8*($ogln)";
xogc9 #calc "$p9*($ogln)";
xogc10 #calc "$p10*($ogln)";


// parabolic type ogive
K 0.75;
// yogc1 #calc "($R)/2 * (((2*($xogc1)/($ogln))-($K*pow(($xogc1)/($ogln),2.0)))/(2-$K))*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";
// yogc2 #calc "($R)/2 * (((2*($xogc2)/($ogln))-($K*pow(($xogc2)/($ogln),2.0)))/(2-$K))*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";
// yogc3 #calc "($R)/2 * (((2*($xogc3)/($ogln))-($K*pow(($xogc3)/($ogln),2.0)))/(2-$K))*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";
// yogc4 #calc "($R)/2 * (((2*($xogc4)/($ogln))-($K*pow(($xogc4)/($ogln),2.0)))/(2-$K))*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";
// yogc5 #calc "($R)/2 * (((2*($xogc5)/($ogln))-($K*pow(($xogc5)/($ogln),2.0)))/(2-$K))*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";
// yogc6 #calc "($R)/2 * (((2*($xogc6)/($ogln))-($K*pow(($xogc6)/($ogln),2.0)))/(2-$K))*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";
// yogc7 #calc "($R)/2 * (((2*($xogc7)/($ogln))-($K*pow(($xogc7)/($ogln),2.0)))/(2-$K))*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";
// yogc8 #calc "($R)/2 * (((2*($xogc8)/($ogln))-($K*pow(($xogc8)/($ogln),2.0)))/(2-$K))*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";
// yogc9 #calc "($R)/2 * (((2*($xogc9)/($ogln))-($K*pow(($xogc9)/($ogln),2.0)))/(2-$K))*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";
// yogc10 #calc "($R)/2 * (((2*($xogc10)/($ogln))-($K*pow(($xogc10)/($ogln),2.0)))/(2-$K))*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";

// power series ogive
// np 0.5;
// yogc1 #calc "($R)/2*pow(($xogc1)/($ogln),$np)*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";
// yogc2 #calc "($R)/2*pow(($xogc2)/($ogln),$np)*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";
// yogc3 #calc "($R)/2*pow(($xogc3)/($ogln),$np)*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";
// yogc4 #calc "($R)/2*pow(($xogc4)/($ogln),$np)*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";
// yogc5 #calc "($R)/2*pow(($xogc5)/($ogln),$np)*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";
// yogc6 #calc "($R)/2*pow(($xogc6)/($ogln),$np)*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";
// yogc7 #calc "($R)/2*pow(($xogc7)/($ogln),$np)*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";
// yogc8 #calc "($R)/2*pow(($xogc8)/($ogln),$np)*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";
// yogc9 #calc "($R)/2*pow(($xogc9)/($ogln),$np)*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";
// yogc10 #calc "($R)/2*pow(($xogc10)/($ogln),$np)*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";

// haack series ogive
C 0.0;
rpi #calc "($R)/2/sqrt(3.14159265359)";
th1 #calc "acos(1-2*($xogc1)/($ogln))";
th2 #calc "acos(1-2*($xogc2)/($ogln))";
th3 #calc "acos(1-2*($xogc3)/($ogln))";
th4 #calc "acos(1-2*($xogc4)/($ogln))";
th5 #calc "acos(1-2*($xogc5)/($ogln))";
th6 #calc "acos(1-2*($xogc6)/($ogln))";
th7 #calc "acos(1-2*($xogc7)/($ogln))";
th8 #calc "acos(1-2*($xogc8)/($ogln))";
th9 #calc "acos(1-2*($xogc9)/($ogln))";
th10 #calc "acos(1-2*($xogc10)/($ogln))";

yogc1 #calc "$rpi*sqrt($th1-sin(2*$th1)/2 +($C)*pow(sin($th1),3.0))*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";
yogc2 #calc "$rpi*sqrt($th2-sin(2*$th2)/2 +($C)*pow(sin($th2),3.0))*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";
yogc3 #calc "$rpi*sqrt($th3-sin(2*$th3)/2 +($C)*pow(sin($th3),3.0))*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";
yogc4 #calc "$rpi*sqrt($th4-sin(2*$th4)/2 +($C)*pow(sin($th4),3.0))*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";
yogc5 #calc "$rpi*sqrt($th5-sin(2*$th5)/2 +($C)*pow(sin($th5),3.0))*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";
yogc6 #calc "$rpi*sqrt($th6-sin(2*$th6)/2 +($C)*pow(sin($th6),3.0))*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";
yogc7 #calc "$rpi*sqrt($th7-sin(2*$th7)/2 +($C)*pow(sin($th7),3.0))*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";
yogc8 #calc "$rpi*sqrt($th8-sin(2*$th8)/2 +($C)*pow(sin($th8),3.0))*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";
yogc9 #calc "$rpi*sqrt($th9-sin(2*$th9)/2 +($C)*pow(sin($th9),3.0))*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";
yogc10 #calc "$rpi*sqrt($th10-sin(2*$th10)/2 +($C)*pow(sin($th10),3.0))*cos($wedg)+($mepd)*($diameter)*cos($wedg)/2";

// calculation of z coordinates of ogive
zogc1p #calc "($yogc1)/cos($wedg)*sin($wedg)";
zogc1n #calc "($yogc1)/cos($wedg)*sin(-$wedg)";
zogc2p #calc "($yogc2)/cos($wedg)*sin($wedg)";
zogc2n #calc "($yogc2)/cos($wedg)*sin(-$wedg)";
zogc3p #calc "($yogc3)/cos($wedg)*sin($wedg)";
zogc3n #calc "($yogc3)/cos($wedg)*sin(-$wedg)";
zogc4p #calc "($yogc4)/cos($wedg)*sin($wedg)";
zogc4n #calc "($yogc4)/cos($wedg)*sin(-$wedg)";
zogc5p #calc "($yogc5)/cos($wedg)*sin($wedg)";
zogc5n #calc "($yogc5)/cos($wedg)*sin(-$wedg)";
zogc6p #calc "($yogc6)/cos($wedg)*sin($wedg)";
zogc6n #calc "($yogc6)/cos($wedg)*sin(-$wedg)";
zogc7p #calc "($yogc7)/cos($wedg)*sin($wedg)";
zogc7n #calc "($yogc7)/cos($wedg)*sin(-$wedg)";
zogc8p #calc "($yogc8)/cos($wedg)*sin($wedg)";
zogc8n #calc "($yogc8)/cos($wedg)*sin(-$wedg)";
zogc9p #calc "($yogc9)/cos($wedg)*sin($wedg)";
zogc9n #calc "($yogc9)/cos($wedg)*sin(-$wedg)";
zogc10p #calc "($yogc10)/cos($wedg)*sin($wedg)";
zogc10n #calc "($yogc10)/cos($wedg)*sin(-$wedg)";

// calculation of absolute x coordinates of ogive
xogc1 #calc "($xogc1)*$diameter + $forw";
xogc2 #calc "($xogc2)*$diameter + $forw";
xogc3 #calc "($xogc3)*$diameter + $forw";
xogc4 #calc "($xogc4)*$diameter + $forw";
xogc5 #calc "($xogc5)*$diameter + $forw";
xogc6 #calc "($xogc6)*$diameter + $forw";
xogc7 #calc "($xogc7)*$diameter + $forw";
xogc8 #calc "($xogc8)*$diameter + $forw";
xogc9 #calc "($xogc9)*$diameter + $forw";
xogc10 #calc "($xogc10)*$diameter + $forw";



// y/z coordinates of external boundary
ybp #calc "$boun*cos($wedg)";
zbp #calc "$boun*sin($wedg)";
zbn #calc "$boun*sin(-$wedg)";

// y/z coordinates of bullet
y2  #calc "$diameter*cos($wedg)/2";
ybt #calc "$diameter*$btld*cos($wedg)/2";
z2p #calc "$diameter*sin($wedg)/2";
z2n #calc "$diameter*sin(-$wedg)/2";
ztp #calc "$diameter*$btld*sin($wedg)/2";
ztn #calc "$diameter*$btld*sin(-$wedg)/2";

// cells before projectile
lx #calc "$forw";
xcells1 #calc "abs(($lx)/($dx1))";

// cells in projectile
lx #calc "$x2 - $forw";
xcells2 #calc "abs(($lx)/($dx2))";

lx #calc "$x3 - $x2";
xcells3 #calc "abs(($lx)/($dx3))";

lx #calc "$x4 - $x3";
xcells4 #calc "abs(($lx)/($dx4))";

// cells after projectile
lx #calc "$x5 - $x4";
xcells5 #calc "abs(($lx)/($dx5))";

